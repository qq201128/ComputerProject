<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace属性：用户指定当前的映射文件和那个接口进行映射。需要指定接口的文件路径，需要标注包的完整路径接口-->

<mapper namespace="com.cy.store.mapper.UserMapper">
    <!--自定义映射规则,resultmap来完成映射规则的定义-->
    <!--id属性:给这个映射负责分配一个唯一的id值,对应的就是resultmap=id属性的值
        type属性:取值是一个类,表示的是数据库中的查询结果于java中那个实体类进行结果集的结果集映射
    -->
    <resultMap id="UserEntityMap" type="com.cy.store.entity.User">
        <!--将表的资源和类的属性不一致的字段进行匹配,一致的可以省略不写-->
        <!-- 配合完成名称不一致的映射column属性:表示表中的资源名称 property属性:表示类中的属性名称        -->
        <!-- 在定义映射规则时,主键是不可以省略的 -->
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <!-- 插入用户数据：Integer insert(User user) -->
    <!-- useGeneratedKeys：开启某个字段的值递增（一般是主键） keyproperty：标签将表中的那个字段作为主键递增-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO
            t_user (username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time)
        VALUES(
                  #{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime}
              )
    </insert>

    <!-- 根据用户名查询用户数据：User findByUsername(String username) -->
    <!-- select在指定的时候,查询的接口是一个对象或者多个对象   -->
    <!--resulttype:表示的是查询的结果集类型,只需要指定对应映射类的类型,并且包含完整包接口.    -->
    <!--resultmap:当表的字段和类的对象属性的字段名称不一致时,来自定义查询结果集的映射规则,放在最前面用于自定义规则  -->
    <select id="findByUsername" resultMap="UserEntityMap">
        SELECT * FROM t_user WHERE username = #{username}
    </select>


    <update id="updatePasswordByUid">
        update  t_user set
            password=#{password},
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        where uid=${uid}
    </update>


    <select id="findByUid" resultMap="UserEntityMap">
        select * from  t_user where  uid=#{uid}

    </select>
<!--if表示条件标签，test接收的是一个返回值为布尔类型的条件，如果test的结果为真则执行if内部的语句-->
    <update id="updateInfoByUid">
        update t_user set
        <if test="phone!=null">phone=#{phone},</if>
        <if test="email!=null">email=#{email},</if>
        <if test="gender!=null">gender=#{gender},</if>
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        where uid = ${uid}
    </update>
    
    <update id="updateAvatarByUid">
        update t_user set
                avatar=#{avatar},
                modified_user=#{modifiedUser},
                modified_time=#{modifiedTime}
        where uid=#{uid}

    </update>
</mapper>